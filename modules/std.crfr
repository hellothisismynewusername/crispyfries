/* ---- MATH ---- */

fn factorial32 inp i32 : i32 {
    do
        ~inp 1 i32 == if
            1 i32 -> ret
        else
            ~inp ~inp 1 i32 - factorial32 * -> ret
        endif
        -1 i32 -> ret
    ;
}

fn factorial64 inp i64 : i64 {
    do
        ~inp 1 i64 == if
            1 i64 -> ret
        else
            ~inp ~inp 1 i64 - factorial64 * -> ret
        endif
        -1 i64 -> ret
    ;
}

/* ---- STRINGS AND CHARS ---- */

fn itoc32 inp0 i32 : char {
    let outpu : char
    do
        ~inp0 0 i32 == if
            '0' -> outpu
        else
        endif
        ~inp0 1 i32 == if
            '1' -> outpu
        else
        endif
        ~inp0 2 i32 == if
            '2' -> outpu
        else
        endif
        ~inp0 3 i32 == if
            '3' -> outpu
        else
        endif
        ~inp0 4 i32 == if
            '4' -> outpu
        else
        endif
        ~inp0 5 i32 == if
            '5' -> outpu
        else
        endif
        ~inp0 6 i32 == if
            '6' -> outpu
        else
        endif
        ~inp0 7 i32 == if
            '7' -> outpu
        else
        endif
        ~inp0 8 i32 == if
            '8' -> outpu
        else
        endif
        ~inp0 9 i32 == if
            '9' -> outpu
        else
        endif

        outpu -> ret
    ;
}

fn itostr32 inp1 i32 : char^ {
    let var : i32
    let len : i32
    let b : bool
    let outp : char^
    do
        ~inp1 -> var
        0 i32 -> len
        true -> b
    ;

    /* getting len */
    while do var 0 i32 !=;
        do
            var 10 i32 / -> var
            len 1 i32 + -> len
        ;
    endwhile
    let cntr : i32
    do
        len 1 i32 + malloc -> outp
        true -> b
        ~inp1 -> var
        len 1 i32 - -> cntr
    ;
    while do b;
        do
            var 0 i32 == if
                0 i8 outp len @ <-
                false -> b
            else
                var 10 i32 rem itoc32
                outp cntr @ <-

                var 10 i32 / -> var
                cntr 1 i32 - -> cntr
            endif
        ;
    endwhile

    do outp -> ret;
}

/* the strlens do NOT include the null terminator... it's to prank those who aren't on the edge of their seat */

fn strlen32 inp char^ : i32 {
    let not_reached : bool
    let count32 : i32
    do
        true -> not_reached
        0 i32 -> count32
    ;
    while do not_reached;
        do
            ~inp count32 @ # 0 char == if
                false -> not_reached
            else
                count32 1 i32 + -> count32
            endif
        ;
    endwhile
    do count32 -> ret;
}

fn strlen64 inp char^ : i64 {
    let not_reached : bool
    let count64 : i64
    do
        true -> not_reached
        0 i64 -> count64
    ;
    while do not_reached;
        do
            ~inp count64 @ # 0 char == if
                false -> not_reached
            else
                count64 1 i64 + -> count64
            endif
        ;
    endwhile
    do count64 -> ret;
}

fn strdup inp char^ : char^ {
    let out_str : char^
    let len64 : i64
    do
        ~inp strlen64 1 i64 + -> len64 malloc -> out_str
    ;

    let b : bool
    let cntr64 : i64
    do
        true -> b
        0 i64 -> cntr64
    ;
    while do b;
        do
            cntr64 len64 == if
                0 char out_str len64 @ <-
                false -> b
            else
                ~inp cntr64 @ #
                    out_str cntr64 @
                    <-
                cntr64 1 i64 + -> cntr64
            endif
        ;
    endwhile
    do out_str -> ret;
}

/* this is different from the strcat you know because instead of storing the destination into one of the input pointers, it instead returns a pointer to the destination and leaves the inputs unaffected */
fn strcat inp1 char^ inp2 char^ : char^ {
    let end_of_inp1 : i32
    let end_of_inp2 : i32

    do
    	~inp1 strlen32 -> end_of_inp1
	~inp2 strlen32 -> end_of_inp2
    ;

        /* putting ~inp1 and ~inp2 into out */
	let out : char^
	let cntr1 : i32
	let cntr2 : i32
	let not_yet_reached_inp1_end : bool
	let not_yet_reached_inp2_end : bool
	do
		0 i32 -> cntr1 -> cntr2
		true -> not_yet_reached_inp1_end -> not_yet_reached_inp2_end

		end_of_inp1
		end_of_inp2 1 i32 +
		+
		malloc -> out
	;
	while do not_yet_reached_inp1_end;
		do
			~inp1 cntr1 @ # 0 char == if
				false -> not_yet_reached_inp1_end
			else
				~inp1 cntr1 @ # out cntr1 @ <-
				cntr1 1 i32 + -> cntr1
			endif
		;
	endwhile
	while do not_yet_reached_inp2_end;
		do
			~inp2 cntr2 @ # 0 char == if
				false -> not_yet_reached_inp2_end
			else
			endif
			~inp2 cntr2 @ # out cntr2 end_of_inp1 + @ <- 
			cntr2 1 i32 + -> cntr2
		;
	endwhile

	do out -> ret;
}
